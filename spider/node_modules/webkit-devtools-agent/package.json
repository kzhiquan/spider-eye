{
  "name": "webkit-devtools-agent",
  "description": "Webkit devtools agent that leverages remote debugging and profiling of nodejs applications using the built-in webkit inspector.",
  "keywords": [
    "devtools",
    "agent",
    "webkit",
    "debugger",
    "profiler",
    "remote",
    "v8"
  ],
  "homepage": "http://github.com/c4milo/node-webkit-agent",
  "version": "0.0.4",
  "author": {
    "name": "Camilo Aguilar"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/c4milo/node-webkit-agent"
  },
  "engines": {
    "node": "0.6 || 0.7 || 0.8"
  },
  "devDependencies": {
    "mocha": "0.14.1",
    "should": "0.6.0"
  },
  "dependencies": {
    "v8-profiler": "git://github.com/c4milo/v8-profiler.git#master",
    "ws": "0.4.13"
  },
  "main": "webkit-devtools-agent",
  "readme": "# Node Webkit Agent\nThis module is an implementation of\n[Chrome developer tools protocol](http://code.google.com/chrome/devtools/docs/protocol/1.0/index.html).\nIt is still pretty much a work in progress and only the heap and CPU profilers are working right now. Debugger, console\nand networking will be added soon.\n\n##Features\nThis module allows you to debug and profile remotely your nodejs applications\nleveraging the following features by re-using the [built-in devtools front-end](http://code.google.com/chrome/devtools/docs/overview.html)\nthat comes with any webkit-based browser such as Chrome and Safari.\n\n* Remote debugging\n* Remote heap and CPU profiling\n* Remote console\n* Network monitoring\n\n##Installation\n`npm install webkit-devtools-agent`\n\n##Example\n```javascript\nvar agent = require('webkit-devtools-agent');\nvar http = require('http');\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello World\\n');\n}).listen(8080, '127.0.0.1');\nconsole.log('[%s] Server running at http://127.0.0.1:8080/', process.pid);\n```\n##Connecting to the agent\n\n1. Activate the agent, in your nodejs application, by sending a SIGUSR2 signal to its process id. To de-activate, send the signal once again.\n`kill -SIGUSR2 <the process id of your nodejs app>`\n\n2. Using your browser, go to http://trac.webkit.org/export/head/trunk/Source/WebCore/inspector/front-end/inspector.html?ws=localhost:1337. It's important to make sure\nyour browser supports websockets, otherwise the front-end won't be able to connect to the node agent whatsoever.\n\nYou can also change the agent port and host where it listen to by setting up the DEBUG_PORT and DEBUG_HOST environment variables.\n\nFor more documentation about how to use and interpret devtools, please go to the [Devtools official documentation](http://code.google.com/chrome/devtools/docs/overview.html)\n\n##Screenshots\n### CPU profiling\n![Screenshot](http://i.imgur.com/XLFG5.png)\n\n### Heap Profiling\n![Screenshot](http://i.imgur.com/2jkme.png)\n\n\nHappy Debugging!\n",
  "readmeFilename": "README.md",
  "_id": "webkit-devtools-agent@0.0.4",
  "dist": {
    "shasum": "01b4467eebfb489637958bc9746f4c3db1ca2943"
  },
  "_from": "webkit-devtools-agent"
}
